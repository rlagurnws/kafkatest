package kafka.money.producer;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Service;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class MoneyProducer {
	private final KafkaTemplate<String,String> userKafkaTemplate;
	    
    @Autowired
    public MoneyProducer(KafkaTemplate kafkaTemplate) {
    	userKafkaTemplate = kafkaTemplate;
    }

    @Value(value = "signUpResultByMoney")
    private String topicName;
    
    public void signUpPublish(Map<String, Object> string) {
    	ObjectMapper mapper = new ObjectMapper();
    	ListenableFuture<SendResult<String, String>> future;
		try {
			future = userKafkaTemplate.send(topicName, mapper.writeValueAsString(string));
			future.addCallback(new ListenableFutureCallback<SendResult<String,String>>(){
				@Override
				public void onSuccess(SendResult<String,String> result) {
					System.out.println("발행 성공?");
				}
				
				@Override
				public void onFailure(Throwable t) {
					System.out.println("발행 실패?");
				}
			});
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}
