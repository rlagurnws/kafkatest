package kafka.money.producer;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

public class MoneyProducer {
	private final KafkaTemplate<String, Map<String,Object>> userKafkaTemplate;
	    
    @Autowired
    public MoneyProducer(KafkaTemplate kafkaTemplate) {
    	userKafkaTemplate = kafkaTemplate;
    }

    @Value(value = "signUpResultByMoney")
    private String topicName;
    
    public void signUpPublish(Map<String, Object> string) {
    	ListenableFuture<SendResult<String,Map<String,Object>>> future = userKafkaTemplate.send(topicName, string);
    	future.addCallback(new ListenableFutureCallback<SendResult<String,Map<String,Object>>>(){
    		@Override
    		public void onSuccess(SendResult<String,Map<String,Object>> result) {
    			System.out.println("발행 성공?");
    		}
    		
    		@Override
    		public void onFailure(Throwable t) {
    			System.out.println("발행 실패?");
    		}
    	});
    }
}
